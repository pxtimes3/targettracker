import { eq, and } from 'drizzle-orm';
import { json } from '@sveltejs/kit';
import { db } from '$lib/server/db';
import { ammunition, ammunitionTypeEnum, measurementsEnum, weightEnum, primerTypeEnum } from '@/server/db/schema.js';
import { number, z } from 'zod';
import type { RequestEvent } from '$types';
import { error } from '@sveltejs/kit';


export async function POST({ request }): Promise<Response>
{
    try {
        let result;
        let updatedAmmunition;

        const requestData = await request.json();
        console.debug('requestData:', requestData);

        if (requestData) {
            // parse string => number
            requestData.bulletWeight = parseFloat(requestData.bulletWeight) || 0;
            requestData.propellantCharge = parseFloat(requestData.propellantCharge) || 0;
            requestData.bulletBcG1 = parseFloat(requestData.bulletBcG1) || 0;
            requestData.bulletBcG7 = parseFloat(requestData.bulletBcG7) || 0;
            requestData.bulletSD = parseFloat(requestData.bulletSD) || 0;
            requestData.caliberMm = parseFloat(requestData.caliberMm) || 0;
            requestData.cartridgeOverallLength = parseFloat(requestData.cartridgeOverallLength) || 0;
            
            // switches
            requestData.caliberUnit = requestData.caliberUnit === 'on' ? 
                requestData.caliberUnit = 'metric' : 
                requestData.caliberUnit = 'imperial';
        }

        const validatedData = AmmunitionSchema.parse(requestData);

        if (!validatedData.userId) {
            throw new Error('Not authenticated?');
        }
        

        const ammunitionData = {
            name: validatedData.name,
            type: validatedData.type,
            manufacturerCase: validatedData.manufacturerCase || null,
            manufacturerBullet: validatedData.manufacturerBullet || null,
            manufacturerPrimer: validatedData.manufacturerPrimer || null,
            manufacturerPropellant: validatedData.manufacturerPropellant || null,
            propellantName: validatedData.propellantName || null,
            propellantCharge: validatedData.propellantCharge || null,
            bulletName: validatedData.bulletName || null,
            caliber: validatedData.caliber || null,
            caliberUnit: validatedData.caliberUnit || null,
            bulletWeight: validatedData.bulletWeight || null,
            primerType: validatedData.primerType || null,
            primerName: validatedData.primerName || null,
            bulletBcG1: validatedData.bulletBcG1 || null,
            bulletBcG7: validatedData.bulletBcG1 || null,
            manufacturerBrand: validatedData.manufacturerBrand || null,
            bulletWeightUnit: validatedData.bulletWeightUnit || null,
            propellantWeightUnit: validatedData.propellantWeightUnit || null,
            manufacturerName: validatedData.manufacturerName || null,
            caliberMm: validatedData.caliberMm || null,
            date: validatedData.date || new Date(),
            note: validatedData.note || null,
            cartridgeOverallLength: validatedData.cartridgeOverallLength || null,
            cartridgeOverallLengthUnit: validatedData.cartridgeOverallLengthUnit || null,
            userId: validatedData.userId
        }

        // update
        if (validatedData.id) {
            result = await db.update(ammunition)
                .set(ammunitionData)
                .where(
                    and(
                        eq(ammunition.id, validatedData.id),
                        eq(ammunition.userId, validatedData.userId)
                    )
                )
                .returning();

            updatedAmmunition = await db.select()
                .from(ammunition)
                .where(
                    and(
                        eq(ammunition.id, validatedData.id),
                        eq(ammunition.userId, validatedData.userId)
                    )
                )
                .limit(1);
        }
        // insert
        else {
            result = await db.insert(ammunition)
                .values({
                    ...ammunitionData,
                    userId: validatedData.userId
                })
                .returning();
                
            updatedAmmunition = result;
        }

        return json({ 
            success: true, 
            rows: result.length || 0, 
            ammunition: Array.isArray(updatedAmmunition) ? updatedAmmunition[0] : updatedAmmunition 
        });

        // fail
    } catch (error) {
        if (error instanceof z.ZodError) {
            return json({ success: false, errors: error.errors }, { status: 400 });
        } else {
            console.error('Error adding/updating ammunition:', error);
            return json({ success: false, message: 'Server error' }, { status: 500 });
        }
    }
}

export async function GET({ params, locals }): Promise<Response>
{
    const userAmmunition: AmmunitionData[] = [];
    let userId: string;

    if (!locals.session?.id) { 
        error(503, 'Not authenticated.');
        return json({ success: false, rows: 0, ammunition: undefined});
    } else {
        userId = locals.session.userId;
    }

    try {
        console.debug(`Fetching ammunition for userId: ${userId}`);
        const userAmmunition = await db.select()
            .from(ammunition)
            .where(
                eq(ammunition.userId, userId)
            );
        
        if (userAmmunition) {
            console.debug('result', userAmmunition);
        }

        return json({ success: true, rows: userAmmunition.length || 0, ammunition: userAmmunition});
    } catch (error) {
        console.error(error);
        return json({ success: false, message: 'Server error' }, { status: 500 });
    }
}